# Generated by Django 4.0.5 on 2022-06-12 16:57

import json
from django.db import migrations
from django.db.models import F, CharField
from django.db.models.functions import Cast
from wagtail.blocks import StreamValue
from wagtail.fields import StreamField
from wagtail_streamfield_migration_toolkit.utils import hello_world

def forward(apps, schema_editor):
    BlogPage = apps.get_model('blog', 'BlogPage')
    field_name = 'content'

    # Using an annotation to access the raw data (so that the blocks aren't filtered out). 
    # The column had to be cast as a CharField, otherwise it gets converted into a StreamField.
    for bp in BlogPage.objects.all().annotate(raw_content=Cast(F(field_name), CharField())):
        blocks = json.loads(bp.raw_content)

        stream_data = []   
        mapped = False 

        for block in blocks:
            if block['type'] == 'field1':
                mapped = True
                new_block = {}
                new_block['type'] = 'block1'
                new_block['value'] = block['value']
                stream_data.append(new_block)

            else:
                stream_data.append(block)

        if mapped:
            stream_block = bp.content.stream_block
            bp.content = StreamValue(stream_block, stream_data, is_lazy=True)
            bp.save()


def backward(apps, schema_editor):
    BlogPage = apps.get_model('blog', 'BlogPage')
    field_name = 'content'

    for bp in BlogPage.objects.all().annotate(raw_content=Cast(F(field_name), CharField())):
        blocks = json.loads(bp.raw_content)

        stream_data = []   
        mapped = False 

        for block in blocks:
            if block['type'] == 'block1':
                mapped = True
                new_block = {}
                new_block['type'] = 'field1'
                new_block['value'] = block['value']
                stream_data.append(new_block)

            else:
                stream_data.append(block)

        if mapped:
            stream_block = bp.content.stream_block
            bp.content = StreamValue(stream_block, stream_data, is_lazy=True)
            bp.save()


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0003_alter_blogpage_content'),
    ]

    operations = [
        migrations.RunPython(forward, backward)
    ]
